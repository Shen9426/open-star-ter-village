{"version":3,"sources":["logo.svg","BoardGame.tsx","App.tsx","reportWebVitals.ts","index.tsx","../../packages/game/dist/index.js"],"names":["Boardgame","Client","game","OpenStarTerVillage","multiplayer","Local","App","className","src","logo","alt","href","target","rel","playerID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","defineProperty","exports","value","setup","ctx","rules","decks","projects","pile","discardPile","resources","events","table","max","players","playOrder","reduce","playerId","hand","workerTokens","closedProjects","moves","phases","play","start","onBegin","state","_a","_b","random","Shuffle","cards","splice","push","turn","stages","action","createProject","recruit","contribute","next","settle","discard","discardProjects","noLimit","move","discardResources","refill","drawProjects","drawResources","onEnd","playerView","view","publicPlayers","id","player"],"mappings":"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","file":"static/js/main.67314280.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { OpenStarTerVillage } from '@open-star-ter-village/webapp-game';\nimport { Client } from 'boardgame.io/react';\nimport { Local } from 'boardgame.io/multiplayer';\n\nconst Boardgame = Client({\n  game: OpenStarTerVillage,\n  multiplayer: Local(),\n});\n\nexport default Boardgame;\n","import logo from './logo.svg';\nimport './App.css';\nimport Boardgame from './BoardGame';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <Boardgame playerID=\"0\" />\n      <Boardgame playerID=\"1\" />\n      <Boardgame />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OpenStarTerVillage = void 0;\nexports.OpenStarTerVillage = {\n    setup: function (ctx) {\n        var rules = {};\n        var players = ctx.playOrder\n            .reduce(function (s, playerId) {\n            s[playerId] = {\n                hand: { projects: [], resources: [] },\n                workerTokens: 0,\n                closedProjects: 0,\n            };\n            return s;\n        }, {});\n        var decks = {\n            projects: {\n                pile: [],\n                discardPile: [],\n            },\n            resources: {\n                pile: [],\n                discardPile: [],\n            },\n            events: {\n                pile: [],\n                discardPile: [],\n            },\n        };\n        var table = {\n            projects: [],\n            max: 0,\n        };\n        return {\n            rules: rules,\n            decks: decks,\n            table: table,\n            players: players,\n        };\n    },\n    moves: {},\n    phases: {\n        play: {\n            start: true,\n            onBegin: function (state, ctx) {\n                var _a, _b;\n                // shuffle cards\n                state.decks.events.pile = ctx.random.Shuffle(state.decks.events.pile);\n                state.decks.projects.pile = ctx.random.Shuffle(state.decks.projects.pile);\n                state.decks.resources.pile = ctx.random.Shuffle(state.decks.resources.pile);\n                state.decks.projects;\n                for (var playerId in state.players) {\n                    var cards = state.decks.projects.pile.splice(0, 2);\n                    (_a = state.players[playerId].hand.projects).push.apply(_a, cards);\n                }\n                state.decks.resources;\n                for (var playerId in state.players) {\n                    var cards = state.decks.resources.pile.splice(0, 5);\n                    (_b = state.players[playerId].hand.resources).push.apply(_b, cards);\n                }\n                for (var playerId in state.players) {\n                    state.players[playerId].workerTokens = 10;\n                }\n            },\n        },\n    },\n    turn: {\n        onBegin: function () {\n            // roundStart do something\n        },\n        stages: {\n            action: {\n                moves: {\n                    createProject: function () { },\n                    recruit: function () { },\n                    contribute: function () { },\n                },\n                next: 'settle',\n            },\n            settle: {\n                next: 'discard',\n            },\n            discard: {\n                moves: {\n                    discardProjects: {\n                        noLimit: true,\n                        move: function () { },\n                    },\n                    discardResources: {\n                        noLimit: true,\n                        move: function () { },\n                    }\n                },\n                next: 'refill',\n            },\n            refill: {\n                moves: {\n                    drawProjects: function () { },\n                    drawResources: function () { },\n                },\n            },\n        },\n        onEnd: function () { },\n    },\n    playerView: function (state, ctx, playerId) {\n        var decks = state.decks, players = state.players, view = __rest(state, [\"decks\", \"players\"]);\n        var publicPlayers = {};\n        for (var id in players) {\n            var _a = players[id], hand = _a.hand, player = __rest(_a, [\"hand\"]);\n            publicPlayers[id] = player;\n        }\n        if (playerId) {\n            publicPlayers[playerId] = players[playerId];\n        }\n        return __assign(__assign({}, view), { players: publicPlayers });\n    },\n};\n"],"sourceRoot":""}